from helper import *

d = {
    1:[[(1,9),(0,10)],[(2,9),(2,10)],[(4,9),(3,10)],[(5,9),(5,10)]],
    2:[[(1,9),(0,10)],[(1,8),(0,8)],[(1,6),(0,7)],[(1,5),(0,5)]],
    3:[[(5,9),(5,10)],[(4,9),(3,10)],[(2,9),(2,10)],[(1,9),(0,10)]],
    4:[[(5,9),(5,10)],[(6,8),(7,8)],[(8,6),(8,7)],[(9,5),(10,5)]],
    5:[[(10,5),(9,5)],[(8,6),(8,7)],[(6,7),(6,8)],[(4,9),(5,9)]],
    6:[[(10,5),(9,5)],[(8,3),(8,4)],[(6,2),(7,2)],[(5,0),(5,1)]],
    7:[[(5,0),(5,1)],[(6,2),(7,2)],[(8,3),(8,4)],[(9,5),(10,5)]],
    8:[[(5,0),(5,1)],[(3,0),(4,1)],[(2,0),(2,1)],[(0,0),(1,1)]],
    9:[[(0,0),(1,1)],[(2,0),(2,1)],[(3,0),(4,1)],[(5,0),(5,1)]],
    10:[[(0,0),(1,1)],[(0,2),(1,2)],[(0,3),(1,4)],[(0,5),(1,5)]],
    11:[[(0,5),(1,5)],[(0,3),(1,4)],[(0,2),(1,2)],[(0,0),(1,1)]],
    12:[[(0,5),(1,5)],[(1,6),(0,7)],[(0,8),(1,8)],[(1,9),(0,10)]],
    13:[[(6,8),(5,9)],[(4,8),(4,9)],[(2,9),(2,10)],[(1,9),(0,10)]],
    14:[[(1,4),(1,5)],[(1,6),(2,6)],[(0,8),(1,8)],[(1,9),(0,10)]],
    15:[[(1,8),(1,9)],[(3,8),(2,9)],[(4,9),(3,10)],[(5,9),(5,10)]],
    16:[[(8,4),(9,5)],[(7,6),(8,6)],[(6,8),(7,8)],[(5,9),(5,10)]],
    17:[[(5,9),(5,10)],[(6,8),(7,8)],[(8,6),(8,7)],[(9,5),(10,5)]],
    18:[[(4,1),(5,1)],[(6,2),(6,3)],[(8,3),(8,4)],[(9,5),(10,5)]],
    19:[[(9,5),(8,6)],[(8,4),(7,4)],[(7,2),(6,2)],[(5,0),(5,1)]],
    20:[[(1,1),(1,2)],[(2,1),(3,2)],[(3,0),(4,1)],[(5,0),(5,1)]],
    21:[[(5,1),(6,2)],[(4,1),(4,2)],[(2,0),(2,1)],[(0,0),(1,1)]],
    22:[[(0,0),(1,1)],[(0,2),(1,2)],[(1,4),(2,4)],[(1,5),(1,6)]],
    23:[[(1,1),(2,1)],[(1,2),(2,3)],[(0,3),(1,4)],[(0,5),(1,5)]],
    24:[[(0,5),(1,5)],[(1,6),(0,7)],[(2,7),(1,8)],[(2,9),(1,9)]]
}
        
l = [[(0,9),(1,10),(6,9),(3,9),(4,10)],
     [(0,9),(1,10),(0,4),(1,7),(0,6)],
     [(4,10),(6,9),(0,9),(3,9),(1,10)],
     [(4,10),(6,9),(9,4),(7,7),(9,6)],
     [(9,6),(9,4),(4,10),(7,7),(5,8)],
     [(9,6),(9,4),(4,0),(7,3),(6,1)],
     [(4,0),(6,1),(9,6),(7,3),(9,4)],
     [(4,0),(6,1),(0,1),(3,1),(1,0)],
     [(0,1),(1,0),(6,1),(3,1),(4,0)],
     [(0,1),(1,0),(0,6),(1,3),(0,4)],
     [(0,4),(0,6),(1,0),(1,3),(0,1)],
     [(0,4),(0,6),(1,10),(1,7),(0,9)],
     [(0,9),(1,10),(6,9),(3,9),(5,8)],
     [(0,9),(1,10),(0,4),(1,7),(2,5)],
     [(4,10),(6,9),(0,9),(3,9),(2,8)],
     [(4,10),(6,9),(9,4),(7,7),(8,5)],
     [(9,6),(9,4),(4,10),(7,7),(6,9)],
     [(9,6),(9,4),(4,0),(7,3),(5,2)],
     [(4,0),(6,1),(9,6),(7,3),(8,5)],
     [(4,0),(6,1),(0,1),(3,1),(2,2)],
     [(0,1),(1,0),(6,1),(3,1),(5,2)],
     [(0,1),(1,0),(0,6),(1,3),(2,5)],
     [(0,4),(0,6),(1,0),(1,3),(2,2)],
     [(0,4),(0,6),(1,10),(1,7),(2,8)]]

def check_valid_path(board,index,player_num):
    moves = d[index]
    for list_moves in moves:
        if(board[list_moves[0]]==(3-player_num) and (board[list_moves[1]]==(3-player_num))):
            return False
    return True



def mate_in_4(board,index,player_num):
        moves = d[index]
        cnt = 0
        
        move = None
        for list_moves in moves:
            
            if((board[list_moves[0]]==player_num) or (board[list_moves[1]]==player_num)):
                continue
            elif(board[list_moves[0]]==(3-player_num) and (board[list_moves[1]]==(3-player_num))):
                return False,None
            else:
                curr = 0
                if(board[list_moves[0]]==0):
                    move = list_moves[0]
                    curr += 1
                if(board[list_moves[1]]==0):
                    move = list_moves[1]
                    curr += 1
                
                if(curr == 1):
                    return True,move
        return True,move
    
    
def strategy(board,player_num):
    best_list_index = -1
    max_occ = -1
    for i,li in enumerate(l):
        occ = 0
        for j in li:
            if(board[j]==(3-player_num)):
                occ = -1
                break
            elif(board[j]==player_num):
                occ += 1
    
        if(occ>=3 and not check_valid_path(board,i+1,player_num)):
            occ= -1
                
        if(occ>max_occ):
            max_occ = occ
            best_list_index = i

    if(max_occ==-1):
        return False,None

    if((max_occ)==5):
        return mate_in_4(board,best_list_index+1,player_num)

    else:
        li = l[best_list_index]
        for move in li:
            if(board[move]==0):
                return True,move
